<?php
// function test_form_alter(&$form, $form_state) {
//   // Apply to all node editing forms only.
//   if (empty($form['#node_edit_form'])) {
//     return;
//   }
//   // Remove the element we don't want.
//   if (isset($form['domain']['domain_site'])) {
//     $form['domain']['domain_site']['#type'] = 'value'; // Set to a static value, hidden from the user.
//     $form['domain']['domain_site']['#value'] = 1; // Set to "always show on all sites". Or use 0 (zero) for the reverse behavior.
//   }
// }

function test_form_views_exposed_form_alter(&$form, &$form_state)
{
    $view = $form_state['view'];
}


function test_form_alter(&$form, $form_state, $form_id)
{
    if ($form_id == 'views_exposed_form') {
    }
    if ($form_id == 'reference_node_form') {
        form_disable_vertical_tabs($form);
    }
}

function form_disable_vertical_tabs(&$form)
{
}

function redirect_prev_submit($form, &$form_state)
{
    unset($_GET['destination']);
    $nid = ($form['nid']['#value']);
    $p_nid = prev_next_nid($nid, 'prev');
    node_form_submit($form, $form_state);
    if ($form_state['clicked_button']['#id'] == 'edit-save-prev') {
        $form_state['redirect'] = 'node/' . $p_nid . '/edit';
    }
}

function redirect_next_submit($form, &$form_state)
{
    unset($_GET['destination']);
    $nid = ($form['nid']['#value']);
    $n_nid = prev_next_nid($nid, 'next');
    node_form_submit($form, $form_state);
    if ($form_state['clicked_button']['#id'] == 'edit-save-next') {
        $form_state['redirect'] = 'node/' . $n_nid . '/edit';
    }
}

function test_mail($from, $to, $subject, $message)
{
    $my_module = 'test';
    $my_mail_token = microtime();
    if ($from == 'default_from') {
        // Change this to your own default 'from' email address.
        $from = variable_get('system_mail', 'info@container.cz');
    }
    $message = array(
        'id' => $my_module . '_' . $my_mail_token,
        'to' => $to,
        'subject' => $subject,
        'body' => array($message),
        'headers' => array(
            'From' => $from,
            'Sender' => $from,
            'Return-Path' => $from,
            'Content-Type' => 'text/html; charset=UTF-8',
            'Content-Transfer-Encoding' => '8Bit'
        ),
    );
    $system = drupal_mail_system($my_module, $my_mail_token);
    $message = $system->format($message);
    if ($system->mail($message)) {
        return TRUE;
    } else {
        return FALSE;
    }
}
function test_query_node_access_alter(QueryAlterableInterface $query) {
  $search = FALSE;
  $node = FALSE;

  // Even though we know the node alias is going to be "n", by checking for the
  // search_index table we make sure we're on the search page. Omitting this step will
  // break the default admin/content page.
  foreach ($query->getTables() as $alias => $table) {
    if ($table['table'] == 'search_index') {
      $search = $alias;
    }
    elseif ($table['table'] == 'node') {
      $node = $alias;
    }
  }

  // Make sure we're on the search page.
  if ($node && $search) {
    $db_and = db_and();
    // I guess you *could* use global $language here instead but this is safer.
    $language = i18n_language_interface();
    $lang = $language->language;

    $db_and->condition($node . '.language', $lang, '=');
    $query->condition($db_and);
  }
}
function test_lang_prefix($cesta)
{
    global $language;
    if ($language->language == 'cs') {
        return $GLOBALS['base_url'] . '/' . drupal_get_path_alias($cesta);
    } else {
        return $GLOBALS['base_url'] . '/' . ($language->language) . '/' . drupal_get_path_alias($cesta);
    }

}

function test_lang_code()
{
    global $language;
    return ($language->language);

}

function test_basic_url_special($domena = '')
{
    global $language;
    $domena = 'http://www.' . $domena;
    return $domena . '/' . ($language->language) . '/';
}


function test_basic_url($domena = '')
{
    global $language;

    if ($domena == '') {
        $domena = $GLOBALS['base_url'];
    } else {
        $domena = 'http://www.' . $domena;
    }

    if ($language->language == 'cs') {
        return $domena . '/';
    } else {
        return $domena . '/' . ($language->language) . '/';
    }

}

function test_get_list($iso)
{
    $countries = array(
        'AD' => t('Andorra'),
        'AE' => t('United Arab Emirates'),
        'AF' => t('Afghanistan'),
        'AG' => t('Antigua and Barbuda'),
        'AI' => t('Anguilla'),
        'AL' => t('Albania'),
        'AM' => t('Armenia'),
        'AN' => t('Netherlands Antilles'),
        'AO' => t('Angola'),
        'AQ' => t('Antarctica'),
        'AR' => t('Argentina'),
        'AS' => t('American Samoa'),
        'AT' => t('Austria'),
        'AU' => t('Australia'),
        'AW' => t('Aruba'),
        'AX' => t('Aland Islands'),
        'AZ' => t('Azerbaijan'),
        'BA' => t('Bosnia and Herzegovina'),
        'BB' => t('Barbados'),
        'BD' => t('Bangladesh'),
        'BE' => t('Belgium'),
        'BF' => t('Burkina Faso'),
        'BG' => t('Bulgaria'),
        'BH' => t('Bahrain'),
        'BI' => t('Burundi'),
        'BJ' => t('Benin'),
        'BL' => t('Saint BarthÃ©lemy'),
        'BM' => t('Bermuda'),
        'BN' => t('Brunei'),
        'BO' => t('Bolivia'),
        'BQ' => t('Caribbean Netherlands'),
        'BR' => t('Brazil'),
        'BS' => t('Bahamas'),
        'BT' => t('Bhutan'),
        'BV' => t('Bouvet Island'),
        'BW' => t('Botswana'),
        'BY' => t('Belarus'),
        'BZ' => t('Belize'),
        'CA' => t('Canada'),
        'CC' => t('Cocos (Keeling) Islands'),
        'CD' => t('Congo (Kinshasa)'),
        'CF' => t('Central African Republic'),
        'CG' => t('Congo (Brazzaville)'),
        'CH' => t('Switzerland'),
        'CI' => t('Ivory Coast'),
        'CK' => t('Cook Islands'),
        'CL' => t('Chile'),
        'CM' => t('Cameroon'),
        'CN' => t('China'),
        'CO' => t('Colombia'),
        'CR' => t('Costa Rica'),
        'CU' => t('Cuba'),
        'CV' => t('Cape Verde'),
        'CW' => t('CuraÃ§ao'),
        'CX' => t('Christmas Island'),
        'CY' => t('Cyprus'),
        'CZ' => t('Czech Republic'),
        'DE' => t('Germany'),
        'DJ' => t('Djibouti'),
        'DK' => t('Denmark'),
        'DM' => t('Dominica'),
        'DO' => t('Dominican Republic'),
        'DZ' => t('Algeria'),
        'EC' => t('Ecuador'),
        'EE' => t('Estonia'),
        'EG' => t('Egypt'),
        'EH' => t('Western Sahara'),
        'ER' => t('Eritrea'),
        'ES' => t('Spain'),
        'ET' => t('Ethiopia'),
        'FI' => t('Finland'),
        'FJ' => t('Fiji'),
        'FK' => t('Falkland Islands'),
        'FM' => t('Micronesia'),
        'FO' => t('Faroe Islands'),
        'FR' => t('France'),
        'GA' => t('Gabon'),
        'GB' => t('United Kingdom'),
        'GD' => t('Grenada'),
        'GE' => t('Georgia'),
        'GF' => t('French Guiana'),
        'GG' => t('Guernsey'),
        'GH' => t('Ghana'),
        'GI' => t('Gibraltar'),
        'GL' => t('Greenland'),
        'GM' => t('Gambia'),
        'GN' => t('Guinea'),
        'GP' => t('Guadeloupe'),
        'GQ' => t('Equatorial Guinea'),
        'GR' => t('Greece'),
        'GS' => t('South Georgia and the South Sandwich Islands'),
        'GT' => t('Guatemala'),
        'GU' => t('Guam'),
        'GW' => t('Guinea-Bissau'),
        'GY' => t('Guyana'),
        'HK' => t('Hong Kong S.A.R., China'),
        'HM' => t('Heard Island and McDonald Islands'),
        'HN' => t('Honduras'),
        'HR' => t('Croatia'),
        'HT' => t('Haiti'),
        'HU' => t('Hungary'),
        'ID' => t('Indonesia'),
        'IE' => t('Ireland'),
        'IL' => t('Israel'),
        'IM' => t('Isle of Man'),
        'IN' => t('India'),
        'IO' => t('British Indian Ocean Territory'),
        'IQ' => t('Iraq'),
        'IR' => t('Iran'),
        'IS' => t('Iceland'),
        'IT' => t('Italy'),
        'JE' => t('Jersey'),
        'JM' => t('Jamaica'),
        'JO' => t('Jordan'),
        'JP' => t('Japan'),
        'KE' => t('Kenya'),
        'KG' => t('Kyrgyzstan'),
        'KH' => t('Cambodia'),
        'KI' => t('Kiribati'),
        'KM' => t('Comoros'),
        'KN' => t('Saint Kitts and Nevis'),
        'KP' => t('North Korea'),
        'KR' => t('South Korea'),
        'KW' => t('Kuwait'),
        'KY' => t('Cayman Islands'),
        'KZ' => t('Kazakhstan'),
        'LA' => t('Laos'),
        'LB' => t('Lebanon'),
        'LC' => t('Saint Lucia'),
        'LI' => t('Liechtenstein'),
        'LK' => t('Sri Lanka'),
        'LR' => t('Liberia'),
        'LS' => t('Lesotho'),
        'LT' => t('Lithuania'),
        'LU' => t('Luxembourg'),
        'LV' => t('Latvia'),
        'LY' => t('Libya'),
        'MA' => t('Morocco'),
        'MC' => t('Monaco'),
        'MD' => t('Moldova'),
        'ME' => t('Montenegro'),
        'MF' => t('Saint Martin (French part)'),
        'MG' => t('Madagascar'),
        'MH' => t('Marshall Islands'),
        'MK' => t('Macedonia'),
        'ML' => t('Mali'),
        'MM' => t('Myanmar'),
        'MN' => t('Mongolia'),
        'MO' => t('Macao S.A.R., China'),
        'MP' => t('Northern Mariana Islands'),
        'MQ' => t('Martinique'),
        'MR' => t('Mauritania'),
        'MS' => t('Montserrat'),
        'MT' => t('Malta'),
        'MU' => t('Mauritius'),
        'MV' => t('Maldives'),
        'MW' => t('Malawi'),
        'MX' => t('Mexico'),
        'MY' => t('Malaysia'),
        'MZ' => t('Mozambique'),
        'NA' => t('Namibia'),
        'NC' => t('New Caledonia'),
        'NE' => t('Niger'),
        'NF' => t('Norfolk Island'),
        'NG' => t('Nigeria'),
        'NI' => t('Nicaragua'),
        'NL' => t('Netherlands'),
        'NO' => t('Norway'),
        'NP' => t('Nepal'),
        'NR' => t('Nauru'),
        'NU' => t('Niue'),
        'NZ' => t('New Zealand'),
        'OM' => t('Oman'),
        'PA' => t('Panama'),
        'PE' => t('Peru'),
        'PF' => t('French Polynesia'),
        'PG' => t('Papua New Guinea'),
        'PH' => t('Philippines'),
        'PK' => t('Pakistan'),
        'PL' => t('Poland'),
        'PM' => t('Saint Pierre and Miquelon'),
        'PN' => t('Pitcairn'),
        'PR' => t('Puerto Rico'),
        'PS' => t('Palestinian Territory'),
        'PT' => t('Portugal'),
        'PW' => t('Palau'),
        'PY' => t('Paraguay'),
        'QA' => t('Qatar'),
        'RE' => t('Reunion'),
        'RO' => t('Romania'),
        'RS' => t('Serbia'),
        'RU' => t('Russia'),
        'RW' => t('Rwanda'),
        'SA' => t('Saudi Arabia'),
        'SB' => t('Solomon Islands'),
        'SC' => t('Seychelles'),
        'SD' => t('Sudan'),
        'SE' => t('Sweden'),
        'SG' => t('Singapore'),
        'SH' => t('Saint Helena'),
        'SI' => t('Slovenia'),
        'SJ' => t('Svalbard and Jan Mayen'),
        'SK' => t('Slovakia'),
        'SL' => t('Sierra Leone'),
        'SM' => t('San Marino'),
        'SN' => t('Senegal'),
        'SO' => t('Somalia'),
        'SR' => t('Suriname'),
        'SS' => t('South Sudan'),
        'ST' => t('Sao Tome and Principe'),
        'SV' => t('El Salvador'),
        'SX' => t('Sint Maarten'),
        'SY' => t('Syria'),
        'SZ' => t('Swaziland'),
        'TC' => t('Turks and Caicos Islands'),
        'TD' => t('Chad'),
        'TF' => t('French Southern Territories'),
        'TG' => t('Togo'),
        'TH' => t('Thailand'),
        'TJ' => t('Tajikistan'),
        'TK' => t('Tokelau'),
        'TL' => t('Timor-Leste'),
        'TM' => t('Turkmenistan'),
        'TN' => t('Tunisia'),
        'TO' => t('Tonga'),
        'TR' => t('Turkey'),
        'TT' => t('Trinidad and Tobago'),
        'TV' => t('Tuvalu'),
        'TW' => t('Taiwan'),
        'TZ' => t('Tanzania'),
        'UA' => t('Ukraine'),
        'UG' => t('Uganda'),
        'UM' => t('United States Minor Outlying Islands'),
        'US' => t('United States'),
        'UY' => t('Uruguay'),
        'UZ' => t('Uzbekistan'),
        'VA' => t('Vatican'),
        'VC' => t('Saint Vincent and the Grenadines'),
        'VE' => t('Venezuela'),
        'VG' => t('British Virgin Islands'),
        'VI' => t('U.S. Virgin Islands'),
        'VN' => t('Vietnam'),
        'VU' => t('Vanuatu'),
        'WF' => t('Wallis and Futuna'),
        'WS' => t('Samoa'),
        'YE' => t('Yemen'),
        'YT' => t('Mayotte'),
        'ZA' => t('South Africa'),
        'ZM' => t('Zambia'),
        'ZW' => t('Zimbabwe'),
    );


    return $countries[$iso];

}
function test_menu_site_status_alter(&$menu_site_status, $path) {
    if (user_is_anonymous()) {
        if ($path == 'user') {
            drupal_goto('user/login');
        }
    }
}

function test_node_presave($node)
{


    if ($node->type == 'fotogalerie') {//jasny


        if (isset($node->field_fotogalerie_main_img['cs'][0])) {
            $file = file_load($node->field_fotogalerie_main_img['cs'][0]['fid']);//nacteni hlavniho obrazku
        } else {
            $file = file_load($node->field_fotogalerie_main_img['und'][0]['fid']);//nacteni hlavniho obrazku
        }

        $tname = taxonomy_get_term_name_by_id($node->field_fotogalerie_kategorie['und'][0]['tid']);//nacteni kategorie
        $tname = (url_slug($tname));//slug kategorie
        if (isset($node->field_fotogalerie_kategorie_2['und'][0]['tid'])) {//pokud k2, tak pridej k2
            $tname_2 = taxonomy_get_term_name_by_id($node->field_fotogalerie_kategorie_2['und'][0]['tid']);
            $tname_2 = (url_slug($tname_2));
            $tname .= '/' . $tname_2;
        }
        if (isset($node->field_fotogalerie_kategorie_3['und'][0]['tid'])) {//pokud k3, tak pridej k3
            $tname_3 = taxonomy_get_term_name_by_id($node->field_fotogalerie_kategorie_3['und'][0]['tid']);
            $tname_3 = (url_slug($tname_3));
            $tname .= '/' . $tname_3;
        }
        if ($node->language == 'cs') {
            $title = (url_slug($node->title));//slug nadpis
        } else {
            $title = (url_slug($node->original->title));//slug nadpis
        }


        $cesta = '/var/www/clients/client1/web2/web/sites/default/files/soubory/fotogalerie';
        if (!is_dir($cesta . '/' . $tname . '/' . $title)) {
            mkdir($cesta . '/' . $tname . '/' . $title, 0777, true);
            mkdir($cesta . '/' . $tname . '/' . $title . '/uvodni', 0777, true);
        }
        file_move($file, 'public://soubory/fotogalerie/' . $tname . '/' . $title . '/uvodni', FILE_EXISTS_RENAME);//presunuti hlavniho


        $imgs = $node->field_fotogalerie_imgs['cs'];
      if($imgs){
        foreach ($imgs AS $img) {
          $file = file_load($img['fid']);
          file_move($file, 'public://soubory/fotogalerie/' . $tname . '/' . $title, FILE_EXISTS_RENAME);//presunuti ostatnich
          unset($file);
        }
      }
    }
}

function taxonomy_get_term_name_by_id($tid)
{
    $term_names = &drupal_static(__FUNCTION__);
    if (!$term_names) {
        $term_names = array();
    } elseif (isset($term_names[$tid])) {
        return $term_names[$tid];
    }
    $term_name = db_query('SELECT name FROM {taxonomy_term_data} WHERE tid = :tid', array(':tid' => $tid))->fetchField();
    if ($term_name) {
        $term_names[$tid] = $term_name;
    }
    return $term_name;
}

function url_slug($str, $options = array())
{

    // Make sure string is in UTF-8 and strip invalid UTF-8 characters
    $str = mb_convert_encoding((string)$str, 'UTF-8', mb_list_encodings());
    $defaults = array('delimiter' => '-', 'limit' => null, 'lowercase' => true, 'replacements' => array(), 'transliterate' => true,);

    // Merge options
    $options = array_merge($defaults, $options);
    $char_map = array(

        // Latin
        'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'A', 'Ã' => 'AE', 'Ã' => 'C', 'Ã' => 'E', 'Ã' => 'E', 'Ã' => 'E', 'Ã' => 'E', 'Ã' => 'I', 'Ã' => 'I', 'Ã' => 'I', 'Ã' => 'I', 'Ã' => 'D', 'Ã' => 'N', 'Ã' => 'O', 'Ã' => 'O', 'Ã' => 'O', 'Ã' => 'O', 'Ã' => 'O', 'Å' => 'O', 'Ã' => 'O', 'Ã' => 'U', 'Ã' => 'U', 'Ã' => 'U', 'Ã' => 'U', 'Å°' => 'U', 'Ã' => 'Y', 'Ã' => 'TH', 'Ã' => 'ss', 'Ã ' => 'a', 'Ã¡' => 'a', 'Ã¢' => 'a', 'Ã£' => 'a', 'Ã¤' => 'a', 'Ã¥' => 'a', 'Ã¦' => 'ae', 'Ã§' => 'c', 'Ã¨' => 'e', 'Ã©' => 'e', 'Ãª' => 'e', 'Ã«' => 'e', 'Ã¬' => 'i', 'Ã­' => 'i', 'Ã®' => 'i', 'Ã¯' => 'i', 'Ã°' => 'd', 'Ã±' => 'n', 'Ã²' => 'o', 'Ã³' => 'o', 'Ã´' => 'o', 'Ãµ' => 'o', 'Ã¶' => 'o', 'Å' => 'o', 'Ã¸' => 'o', 'Ã¹' => 'u', 'Ãº' => 'u', 'Ã»' => 'u', 'Ã¼' => 'u', 'Å±' => 'u', 'Ã½' => 'y', 'Ã¾' => 'th', 'Ã¿' => 'y',

        // Latin symbols
        'Â©' => '(c)',

        // Greek
        'Î' => 'A', 'Î' => 'B', 'Î' => 'G', 'Î' => 'D', 'Î' => 'E', 'Î' => 'Z', 'Î' => 'H', 'Î' => '8', 'Î' => 'I', 'Î' => 'K', 'Î' => 'L', 'Î' => 'M', 'Î' => 'N', 'Î' => '3', 'Î' => 'O', 'Î ' => 'P', 'Î¡' => 'R', 'Î£' => 'S', 'Î¤' => 'T', 'Î¥' => 'Y', 'Î¦' => 'F', 'Î§' => 'X', 'Î¨' => 'PS', 'Î©' => 'W', 'Î' => 'A', 'Î' => 'E', 'Î' => 'I', 'Î' => 'O', 'Î' => 'Y', 'Î' => 'H', 'Î' => 'W', 'Îª' => 'I', 'Î«' => 'Y', 'Î±' => 'a', 'Î²' => 'b', 'Î³' => 'g', 'Î´' => 'd', 'Îµ' => 'e', 'Î¶' => 'z', 'Î·' => 'h', 'Î¸' => '8', 'Î¹' => 'i', 'Îº' => 'k', 'Î»' => 'l', 'Î¼' => 'm', 'Î½' => 'n', 'Î¾' => '3', 'Î¿' => 'o', 'Ï' => 'p', 'Ï' => 'r', 'Ï' => 's', 'Ï' => 't', 'Ï' => 'y', 'Ï' => 'f', 'Ï' => 'x', 'Ï' => 'ps', 'Ï' => 'w', 'Î¬' => 'a', 'Î­' => 'e', 'Î¯' => 'i', 'Ï' => 'o', 'Ï' => 'y', 'Î®' => 'h', 'Ï' => 'w', 'Ï' => 's', 'Ï' => 'i', 'Î°' => 'y', 'Ï' => 'y', 'Î' => 'i',

        // Turkish
        'Å' => 'S', 'Ä°' => 'I', 'Ã' => 'C', 'Ã' => 'U', 'Ã' => 'O', 'Ä' => 'G', 'Å' => 's', 'Ä±' => 'i', 'Ã§' => 'c', 'Ã¼' => 'u', 'Ã¶' => 'o', 'Ä' => 'g',

        // Russian
        'Ğ' => 'A', 'Ğ' => 'B', 'Ğ' => 'V', 'Ğ' => 'G', 'Ğ' => 'D', 'Ğ' => 'E', 'Ğ' => 'Yo', 'Ğ' => 'Zh', 'Ğ' => 'Z', 'Ğ' => 'I', 'Ğ' => 'J', 'Ğ' => 'K', 'Ğ' => 'L', 'Ğ' => 'M', 'Ğ' => 'N', 'Ğ' => 'O', 'Ğ' => 'P', 'Ğ ' => 'R', 'Ğ¡' => 'S', 'Ğ¢' => 'T', 'Ğ£' => 'U', 'Ğ¤' => 'F', 'Ğ¥' => 'H', 'Ğ¦' => 'C', 'Ğ§' => 'Ch', 'Ğ¨' => 'Sh', 'Ğ©' => 'Sh', 'Ğª' => '', 'Ğ«' => 'Y', 'Ğ¬' => '', 'Ğ­' => 'E', 'Ğ®' => 'Yu', 'Ğ¯' => 'Ya', 'Ğ°' => 'a', 'Ğ±' => 'b', 'Ğ²' => 'v', 'Ğ³' => 'g', 'Ğ´' => 'd', 'Ğµ' => 'e', 'Ñ' => 'yo', 'Ğ¶' => 'zh', 'Ğ·' => 'z', 'Ğ¸' => 'i', 'Ğ¹' => 'j', 'Ğº' => 'k', 'Ğ»' => 'l', 'Ğ¼' => 'm', 'Ğ½' => 'n', 'Ğ¾' => 'o', 'Ğ¿' => 'p', 'Ñ' => 'r', 'Ñ' => 's', 'Ñ' => 't', 'Ñ' => 'u', 'Ñ' => 'f', 'Ñ' => 'h', 'Ñ' => 'c', 'Ñ' => 'ch', 'Ñ' => 'sh', 'Ñ' => 'sh', 'Ñ' => '', 'Ñ' => 'y', 'Ñ' => '', 'Ñ' => 'e', 'Ñ' => 'yu', 'Ñ' => 'ya',

        // Ukrainian
        'Ğ' => 'Ye', 'Ğ' => 'I', 'Ğ' => 'Yi', 'Ò' => 'G', 'Ñ' => 'ye', 'Ñ' => 'i', 'Ñ' => 'yi', 'Ò' => 'g',

        // Czech
        'Ä' => 'C', 'Ä' => 'D', 'Ä' => 'E', 'Å' => 'N', 'Å' => 'R', 'Å ' => 'S', 'Å¤' => 'T', 'Å®' => 'U', 'Å½' => 'Z', 'Ä' => 'c', 'Ä' => 'd', 'Ä' => 'e', 'Å' => 'n', 'Å' => 'r', 'Å¡' => 's', 'Å¥' => 't', 'Å¯' => 'u', 'Å¾' => 'z',

        // Polish
        'Ä' => 'A', 'Ä' => 'C', 'Ä' => 'e', 'Å' => 'L', 'Å' => 'N', 'Ã' => 'o', 'Å' => 'S', 'Å¹' => 'Z', 'Å»' => 'Z', 'Ä' => 'a', 'Ä' => 'c', 'Ä' => 'e', 'Å' => 'l', 'Å' => 'n', 'Ã³' => 'o', 'Å' => 's', 'Åº' => 'z', 'Å¼' => 'z',

        // Latvian
        'Ä' => 'A', 'Ä' => 'C', 'Ä' => 'E', 'Ä¢' => 'G', 'Äª' => 'i', 'Ä¶' => 'k', 'Ä»' => 'L', 'Å' => 'N', 'Å ' => 'S', 'Åª' => 'u', 'Å½' => 'Z', 'Ä' => 'a', 'Ä' => 'c', 'Ä' => 'e', 'Ä£' => 'g', 'Ä«' => 'i', 'Ä·' => 'k', 'Ä¼' => 'l', 'Å' => 'n', 'Å¡' => 's', 'Å«' => 'u', 'Å¾' => 'z');

    // Make custom replacements
    $str = preg_replace(array_keys($options['replacements']), $options['replacements'], $str);

    // Transliterate characters to ASCII
    if ($options['transliterate']) {
        $str = str_replace(array_keys($char_map), $char_map, $str);
    }

    // Replace non-alphanumeric characters with our delimiter
    $str = preg_replace('/[^\p{L}\p{Nd}]+/u', $options['delimiter'], $str);

    // Remove duplicate delimiters
    $str = preg_replace('/(' . preg_quote($options['delimiter'], '/') . '){2,}/', '$1', $str);

    // Truncate slug to max. characters
    $str = mb_substr($str, 0, ($options['limit'] ? $options['limit'] : mb_strlen($str, 'UTF-8')), 'UTF-8');

    // Remove delimiter from ends
    $str = trim($str, $options['delimiter']);
    return $options['lowercase'] ? mb_strtolower($str, 'UTF-8') : $str;
}
